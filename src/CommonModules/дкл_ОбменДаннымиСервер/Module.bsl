#Область ПрограммныйИнтерфейс

// Получает версию ПО АСХ 
//
// Параметры:
// НастройкаСклада - СправочникСсылка.дкл_НастройкаСклада - настройка склада, для которой надо определить версию ПО
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица замены.
//
Функция ВерсияПО(НастройкаСклада) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	//@skip-check wrong-string-literal-content
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаСклада, "ВерсияПО");

КонецФункции

#Область ОбщиеДляВерсийПОФункции

// Получает состояние склада-лифта запросом через веб-сервис
//
// Параметры:
// НастройкаСклада - СправочникСсылка.дкл_НастройкаСклада - настройка склада, для которой надо определить версию ПО
//
// Возвращаемое значение:
//  Состояние - Структура - структура со свойствами состояния
//                                                           
Функция ПолучитьСостояниеСкладаЛифта(НастройкаСклада) Экспорт 
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Интерфейс = "DVSStatusService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	//@skip-check bsl-variable-name-invalid
	мФабрикаXDTO = ПолучитьФабрикуХДТОПоПрокси(Прокси);
	
	//@skip-check bsl-variable-name-invalid
	params = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "GetDVSStatus"));	       

	Ответ = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "DVSStatusResult"));	       
		
	Ответ = 
	Прокси.getDVSStatus(params);
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат ОбъектXDTOВСтруктуру(Ответ);

КонецФункции

// Получает список полок склада-лифта запросом через веб-сервис
//
// Параметры:
// НастройкаСклада - СправочникСсылка.дкл_НастройкаСклада - настройка склада, для которой надо определить версию ПО
//
// Возвращаемое значение:
//  Список полок - структура с перечем полок
//                                                           
Функция ПолучитьСписокПолокСкладаЛифта(НастройкаСклада) Экспорт 
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);
	Возврат Обработка.ПолучитьСписокПолокСкладаЛифта(НастройкаСклада);

КонецФункции // ()          

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ПолучитьСписокМестХраненияСкладаЛифта(НастройкаСклада) Экспорт 
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Интерфейс = "StorageService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	//@skip-check bsl-variable-name-invalid
	мФабрикаXDTO = ПолучитьФабрикуХДТОПоПрокси(Прокси);
	
	Если мФабрикаXDTO = Неопределено Тогда
		Возврат Новый Структура; 	
	КонецЕсли;
	
	//@skip-check bsl-variable-name-invalid
	request = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "GetStorageList"));	       
	
	Ответ = Прокси.getStorageList(request);
	
	Возврат ОбъектXDTOВСтруктуру(Ответ);

КонецФункции // ()          

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ПолучитьСтатусыПолокСкладаЛифта(НастройкаСклада) Экспорт 
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Интерфейс = "TrayService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	//@skip-check bsl-variable-name-invalid
	мФабрикаXDTO = ПолучитьФабрикуХДТОПоПрокси(Прокси);    
	
	Если мФабрикаXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	GetTrayStatus = мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "GetTrayStatus");
	
	Если НЕ GetTrayStatus = Неопределено Тогда
		//@skip-check bsl-variable-name-invalid
		request = мФабрикаXDTO.Создать(GetTrayStatus);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Попытка
		Ответ = Прокси.getTrayStatus(request);
	Исключение                                      
		ОбщегоНазначения.СообщитьПользователю(
			ОбработкаОшибок.КраткоеПредставлениеОшибки((ИнформацияОбОшибке())));	
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОбъектXDTOВСтруктуру(Ответ);

КонецФункции // ()          

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
Процедура ВыгрузитьНоменклатуруСклада(НастройкаСклада) Экспорт   
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат;	
	КонецЕсли;
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);
	Обработка.ВыгрузитьНоменклатуруСклада(НастройкаСклада);
	
КонецПроцедуры

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
Процедура ВыгрузитьПользователейСклада(НастройкаСклада, Знач МассивПользователей = Неопределено, Знач МассивUserId = Неопределено) Экспорт

	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ МассивПользователей = Неопределено И НЕ ТипЗнч(МассивПользователей) = Тип("Массив") Тогда
		Пользователь = МассивПользователей;
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(Пользователь);
	КонецЕсли;                                   

	Если НЕ МассивUserId = Неопределено И НЕ ТипЗнч(МассивUserId) = Тип("Массив") Тогда
		UserId = МассивUserId;
		МассивUserId = Новый Массив;
		МассивUserId.Добавить(UserId);
	КонецЕсли;                                   

	Если НЕ РегистрыСведений.дкл_ПользователиСкладов.РеквизитыЗаполненыПередОтправкойВАСХ(НастройкаСклада, МассивПользователей, МассивUserId) Тогда
		Возврат;	
	КонецЕсли;
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);
	Обработка.ВыгрузитьПользователейСклада(НастройкаСклада, МассивПользователей, МассивUserId);
	
КонецПроцедуры

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
Процедура ВыгрузитьСкладскиеЯчейки(НастройкаСклада, СкладскиеЯчейки) Экспорт

	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат;	
	КонецЕсли;
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);
	Обработка.ВыгрузитьСкладскиеЯчейки(НастройкаСклада, СкладскиеЯчейки);
	
КонецПроцедуры

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
Процедура УдалитьСкладскиеЯчейки(НастройкаСклада, СкладскиеЯчейки) Экспорт

	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат;	
	КонецЕсли;
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);
	Обработка.УдалитьСкладскиеЯчейки(НастройкаСклада, СкладскиеЯчейки);
	
КонецПроцедуры

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ПолучитьОстатки(НастройкаСклада) Экспорт 
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);
	Возврат Обработка.ПолучитьОстатки(НастройкаСклада);
	
КонецФункции // ()          

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ПолучитьСписокНоменклатуры(НастройкаСклада) Экспорт 
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Интерфейс = "ItemService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	//@skip-check bsl-variable-name-invalid
	мФабрикаXDTO = ПолучитьФабрикуХДТОПоПрокси(Прокси);
	
	//@skip-check bsl-variable-name-invalid
	request = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "GetItemList"));	       
	
	Ответ = Прокси.getItemList(request);
	
	Возврат ОбъектXDTOВСтруктуру(Ответ);
	
КонецФункции // ()          
 
//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ПолучитьСписокПользователей(НастройкаСклада) Экспорт 

	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);

	Возврат Обработка.ПолучитьСписокПользователей(НастройкаСклада);

	УстановитьПривилегированныйРежим(Истина);

	Интерфейс = "UserService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	//@skip-check bsl-variable-name-invalid
	мФабрикаXDTO = ПолучитьФабрикуХДТОПоПрокси(Прокси);

	Если мФабрикаXDTO = Неопределено Тогда
		Возврат Новый Структура; 	
	КонецЕсли;
	
	//@skip-check bsl-variable-name-invalid
	request = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "GetUserList"));	       
		
	Попытка
		Ответ = Прокси.getUserList(request);
	Исключение                                 
		Ошибка  = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Текст = СтрШаблон(
		"%1 
		|(%2)", 
		Ошибка, "в АСХ должны быть заполнены все обязательные реквизиты пользователей");
		ОбщегоНазначения.СообщитьПользователю(Текст);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОбъектXDTOВСтруктуру(Ответ);

КонецФункции // ()          

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ПолучитьСписокОшибокЛифта(НастройкаСклада) Экспорт 
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Интерфейс = "DVSStatusService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	//@skip-check bsl-variable-name-invalid
	мФабрикаXDTO = ПолучитьФабрикуХДТОПоПрокси(Прокси);
	
	//@skip-check bsl-variable-name-invalid
	request = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "GetErrorLogList"));	       
	
	Ответ = Прокси.getErrorLogList(request);
	
	Возврат ОбъектXDTOВСтруктуру(Ответ);
	
КонецФункции // ()          

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
//@skip-check bsl-variable-name-invalid
Функция ВыдатьПолку(НастройкаСклада, НомерПолки, requestId = Неопределено, feederId = 1) Экспорт 

	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);
	Возврат Обработка.ВыдатьПолку(НастройкаСклада, НомерПолки, requestId, feederId);
	
КонецФункции // ()          

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
//@skip-check bsl-variable-name-invalid
Функция ВернутьПолку(НастройкаСклада, НомерПолки, requestId = Неопределено) Экспорт 
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);
	Возврат Обработка.ВернутьПолку(НастройкаСклада, НомерПолки, requestId);
	
КонецФункции // ()          

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
//@skip-check bsl-variable-name-invalid
Функция СостояниеЗапроса(НастройкаСклада, requestId = Неопределено) Экспорт 
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);
	Возврат Обработка.СостояниеЗапроса(НастройкаСклада, requestId); 

КонецФункции // ()  

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
//@skip-check bsl-variable-name-invalid
Функция ОбновитьПолкуВЛифте(НастройкаСклада, РеквизитыПолки) Экспорт
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);
	Возврат Обработка.ОбновитьПолкуВЛифте(НастройкаСклада, РеквизитыПолки);
	
КонецФункции // ()

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
//@skip-check bsl-variable-name-invalid
Функция РедактированиеПолкиВЛифте(НастройкаСклада, РеквизитыПолки) Экспорт
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);
	Возврат Обработка.РедактированиеПолкиВЛифте(НастройкаСклада, РеквизитыПолки);
	
КонецФункции // ()

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
//@skip-check bsl-variable-name-invalid
Функция ПолучитьСтатусСклада(НастройкаСклада) Экспорт
	
	Обработка = ПодключитьОбработкуExternalIntegration(НастройкаСклада);
	Возврат Обработка.ПолучитьСтатусСклада(НастройкаСклада);

КонецФункции // ()

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПодключитьОбработкуExternalIntegration(НастройкаСклада) Экспорт

	УстановитьПривилегированныйРежим(Истина);    
	
	// ВерсияПО = Справочники.дкл_НастройкиСкладовЛифтов.ВерсияПО(НастройкаСклада);
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаСклада, "ВерсияПО, СпособПодключения");
	
	ВерсияПО = ЗначенияРеквизитов.ВерсияПО;              
	
	СпособПодключения = Лев(Строка(ЗначенияРеквизитов.СпособПодключения),4);
	
	Если ВерсияПО = "1.6" Тогда	  

		Обработка = РегистрыСведений.дкл_Обработки.ПодключитьОбработку(
			Перечисления.дкл_ТипыСообщений.ExternalIntegration_v16, 
				Перечисления.дкл_НаправлениеСообщения.Исходящее, СпособПодключения);

		Если Обработка = Неопределено Тогда
			Обработка = Обработки["ExternalIntegration_v16"];
		КонецЕсли;
			
	ИначеЕсли Лев(ВерсияПО, 2) = "2." И СпособПодключения = "HTTP" Тогда

		Обработка = РегистрыСведений.дкл_Обработки.ПодключитьОбработку(
			Перечисления.дкл_ТипыСообщений.ExternalIntegration_v21_HTTP, 
				Перечисления.дкл_НаправлениеСообщения.Исходящее);

		Если Обработка = Неопределено Тогда
			Обработка = Обработки["ExternalIntegration_v21_HTTP"];
		КонецЕсли;

	ИначеЕсли Лев(ВерсияПО, 2) = "2." И НЕ СпособПодключения = "HTTP" Тогда

		Обработка = РегистрыСведений.дкл_Обработки.ПодключитьОбработку(
			Перечисления.дкл_ТипыСообщений.ExternalIntegration_v21, 
				Перечисления.дкл_НаправлениеСообщения.Исходящее);

		Если Обработка = Неопределено Тогда
			Обработка = Обработки["ExternalIntegration_v21"];
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Обработка;

КонецФункции // ()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьДанныеСообщенияОбмена() Экспорт

	//@skip-check structure-consructor-too-many-keys
	ДанныеСообщенияОбмена = 
		Новый Структура(
			"IDСообщения, Дата, ТипСообщения, Направление, 
			|Месяц, Сообщение, ХранилищеЗначения, Автор, ДатаОбработки,
			|НавигационнаяСсылка,НастройкаСклада,Обработано,
			|Ответ,СообщениеОбОшибке,СсылкаНаОбъект,Статус");

	Возврат ДанныеСообщенияОбмена;
	
КонецФункции

Функция ПолучитьФабрикуХДТОПоПрокси(Прокси) Экспорт     
	Попытка
		Возврат Прокси.ФабрикаXDTO;
	Исключение
		Возврат Неопределено;	
	КонецПопытки;
	
КонецФункции

Функция ПолучитьФабрикуХДТОПоНастройкеСклада(Интерфейс, НастройкаСклада) Экспорт   
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	Возврат Прокси.ФабрикаXDTO;
КонецФункции

// Преобразует объект XDTO в структуру
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO
//  ПараметрыПреобразования - Неопределено, Структура - дополнительные переметры преобразования объекта
// 
// Возвращаемое значение:
//  Структура - Структура объекта.
//
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO, ПараметрыПреобразования = Неопределено) Экспорт
	
	Структура      = Новый Структура;
	ТипОбъектаXDTO = ОбъектXDTO.Тип();
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		ИмяСвойства      = Свойство.Имя;
		ЗначениеСвойства = ОбъектXDTO[ИмяСвойства];
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, ОбъектXDTOВСтруктуру(ЗначениеСвойства, ПараметрыПреобразования));
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, Новый Массив);
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСписка = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					Структура[ИмяСвойства].Добавить(ОбъектXDTOВСтруктуру(ЭлементСписка, ПараметрыПреобразования));
				Иначе
					Структура[ИмяСвойства].Добавить(ЭлементСписка);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Структура.Вставить(ИмяСвойства, ЗначениеСвойства);
			
			Если ПараметрыПреобразования <> Неопределено
				И ПараметрыПреобразования.НайтиИдентификаторы
				И Свойство.Тип = ПараметрыПреобразования.ТипUUID Тогда
				
				РезультатПоиска = ПараметрыПреобразования.ТипыИдентификаторов[ТипОбъектаXDTO];
				Если РезультатПоиска <> Неопределено
					И РезультатПоиска.ИмяПоля = ИмяСвойства Тогда
					ПараметрыПреобразования.Идентификаторы[РезультатПоиска.ИмяТаблицы].Вставить(ЗначениеСвойства, РезультатПоиска.ПустоеЗначение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

