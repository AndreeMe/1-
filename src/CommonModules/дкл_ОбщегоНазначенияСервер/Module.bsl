#Область ПрограммныйИнтерфейс

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция СоздатьПрокси(Интерфейс, НастройкаСклада) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Таймаут = Константы.дкл_ТаймаутСоединения.Получить();  

	Если НЕ ЗначениеЗаполнено(Таймаут) Тогда
		Таймаут = 5;
	КонецЕсли;

	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаСклада, "МестоположениеWSDL, Адрес");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Прокси = дкл_ОбщегоНазначенияПовтИсп.СоздатьПрокси(
		Интерфейс, ЗначенияРеквизитов.МестоположениеWSDL, ЗначенияРеквизитов.Адрес, Таймаут);
		
	Если НЕ ТипЗнч(Прокси) = Тип("WSПрокси") Тогда
		Прокси = ПолучитьПрокси(
			Интерфейс, ЗначенияРеквизитов.МестоположениеWSDL, ЗначенияРеквизитов.Адрес, Таймаут);	
	КонецЕсли;		
	
	Возврат Прокси;
		
КонецФункции // ()    

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция ПолучитьПрокси(Интерфейс, МестоположениеWSDL, Адрес, Таймаут) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(МестоположениеWSDL) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Определение = Новый WSОпределения(МестоположениеWSDL, , , ,Таймаут);  
	Исключение                                                                
		// почему-то не срабатывает с 1-го раза...
		Попытка
			Определение = Новый WSОпределения(МестоположениеWSDL, , , ,Таймаут);  
		Исключение
			Возврат ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецПопытки;
	
	Попытка
		
		Сервис = Определение.Сервисы.Получить("http://www.dikom.ru/lift/integration/services/", Интерфейс);
		ИмяТочкиПодключения = Сервис.ТочкиПодключения[0].Имя;       
		
		Прокси = Новый WSПрокси(Определение, 
		"http://www.dikom.ru/lift/integration/services/",
		Интерфейс, ИмяТочкиПодключения,,Таймаут,,
		Адрес + "/lift/integration/services/" + Интерфейс);         
		
		
	Исключение                                                   
		
		Возврат ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Прокси;
	
КонецФункции // ()

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция URIПространстваИменСервиса() Экспорт
	Возврат "http://www.dikom.ru/lift/integration/services/";
КонецФункции

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция Транслит(Вход) Экспорт
    Коды = Новый Соответствие;
    Коды.Вставить("ё","yo");
    Коды.Вставить("Ё","Yo");
    Нач = КодСимвола("А");
    Англ = "A" "B" "V" "G" "D" "E" "Zh" "Z" "I" "Y" "K" "L" "M" "N" "O" "P" "R" "S" "T" "U" "F" "Kh" "Ts" "Ch" "Sh" "Shch" "" "Y" "" "E" "Yu" "Ya" "a" "b" "v" "g" "d" "e" "zh" "z" "i" "y" "k" "l" "m" "n" "o" "p" "r" "s" "t" "u" "f" "kh" "ts" "ch" "sh" "shch" "" "y" "" "e" "yu" "ya";
    Для К = Нач по КодСимвола("я") Цикл
        Коды.Вставить(Символ(К), СтрПолучитьСтроку(Англ, К - Нач + 1));
    КонецЦикла;
    Выход = "";
    Для К=1 по СтрДлина(Вход) Цикл
        Бкв = Сред(Вход,К,1);
        Зн = Коды.Получить(Бкв);
        Выход = Выход + ?(Зн = Неопределено, Бкв, Зн);
    КонецЦикла;
    Возврат Выход;
КонецФункции

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция ПолучитьСсылкуИзНавигационной(НавигациоонаяСсылка) Экспорт
    
    ПерваяТочка = СтрНайти(НавигациоонаяСсылка, "e1cib/data/");
    ВтораяТочка = СтрНайти(НавигациоонаяСсылка, "?ref=");
    
    ПредставлениеТипа   = Сред(НавигациоонаяСсылка, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НавигациоонаяСсылка, ВтораяТочка + 5));
    Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
    
КонецФункции   

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция ПреобразоватьСтруктуруВСтроку(Структура, Имя = Неопределено) Экспорт
	
	Результат = "";
	
	Для Каждого КиЗ из Структура Цикл           
		Если ТипЗнч(КиЗ.Значение) = Тип("Структура") Тогда
			ВывестиЭлементСтруктуру(Результат, КиЗ.Значение, Имя);
		ИначеЕсли ТипЗнч(КиЗ.Значение) = Тип("Массив") Тогда                     
			ВывестиЭлементМассив(Результат, КиЗ.Значение, Имя);           
		Иначе
			
			Если ЗначениеЗаполнено(КиЗ.Значение) Тогда     
				
				Текст = КиЗ.Ключ + ": " + Строка(КиЗ.Значение);
				
				Если СтрНайти(Результат, Текст) = 0 Тогда
					
					Если Имя = Неопределено Тогда
						Результат = СокрЛП(Результат + Символы.ПС + Текст); 
					ИначеЕсли КиЗ.Ключ = Имя Тогда				
						Результат = СокрЛП(Результат + Символы.ПС + Текст); 
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // ()

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция ПреобразоватьМассивВТаблицуЗначений(МассивДанные) Экспорт
    
    ДанныеТабЗначений = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из МассивДанные Цикл

		// Добавим колонки в таблицу значений
        Если ДанныеТабЗначений.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
                ДанныеТабЗначений.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        // Добавляем данные в таблицу значений
        НоваяСтрока = ДанныеТабЗначений.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
		КонецЦикла;
		
    КонецЦикла;
    
    Возврат ДанныеТабЗначений;
    
КонецФункции 

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция МассивВТЗ(МассивСтруктур) Экспорт
	
	ТабЗнач = Новый ТаблицаЗначений; 
	
	Для Каждого Элемент Из МассивСтруктур Цикл

		// с типизацией
		Если ТабЗнач.Колонки.Количество() = 0 Тогда
			Для Каждого ЭлементСтруктура Из Элемент Цикл
				ТипыМассив = Новый Массив;
				ТипКолонки = ТипЗнч(ЭлементСтруктура.Значение);
				ТипыМассив.Добавить(ТипКолонки);
				ТипыОписание = Новый ОписаниеТипов(ТипыМассив);
				ТабЗнач.Колонки.Добавить(ЭлементСтруктура.Ключ, ТипыОписание);
			КонецЦикла;
		КонецЕсли; 
		
		СтрТЗ = ТабЗнач.Добавить();
		
		Для Каждого ЭлементСтруктура Из Элемент Цикл
			СтрТЗ[ЭлементСтруктура.Ключ] = ЭлементСтруктура.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабЗнач;
	
КонецФункции

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция ТабличныйДокументВТаблицуЗначений(ТабДок) Экспорт
	
	ТаблицаДанныеДокумента = Новый ТаблицаЗначений();
	
	Для СчетчикКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
		
		ИмяКолонки = "_" + СчетчикКолонок;
		ТаблицаДанныеДокумента.Колонки.Добавить(ИмяКолонки);
		
		Для СчетчикСтрок = 1 По ТабДок.ВысотаТаблицы Цикл
			
			ИндексСтроки = СчетчикСтрок - 1;
			
			Если СчетчикКолонок = 1 Тогда
				СтрокаТаблицы = ТаблицаДанныеДокумента.Добавить();
			Иначе
				СтрокаТаблицы = ТаблицаДанныеДокумента[ИндексСтроки];
			КонецЕсли;
			
			ТекущаяЯчейка = ТабДок.Область(СчетчикСтрок, СчетчикКолонок);
			ЗначениеЯчейки = ТекущаяЯчейка.Текст;
			
			СтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки; 
			
		КонецЦикла
	КонецЦикла; 

	Возврат ТаблицаДанныеДокумента;
	
КонецФункции

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция ПроверитьСоединение(НастройкаСклада) Экспорт

	Результат = дкл_ОбменДаннымиСервер.ПолучитьСтатусСклада(НастройкаСклада);
	Справочники.дкл_НастройкиСкладовЛифтов.ЗаписатьСостояниеСкладаЛифта(НастройкаСклада, Результат);
	Возврат Результат.ВРаботе;
	
КонецФункции            

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Процедура Пауза(Сек) Экспорт          
	КонДата = ТекущаяДатаСеанса() + Сек;
	Пока ТекущаяДатаСеанса() < КонДата Цикл
	КонецЦикла;	
КонецПроцедуры

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция XDTOtoXML(XDTO, ВремрФабрикаXDTO = Неопределено) Экспорт 
	
	Если ВремрФабрикаXDTO = Неопределено Тогда
		ВремрФабрикаXDTO = ФабрикаXDTO;
	КонецЕсли; 
	
	ЗаписьХМЛ  = Новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку("UTF-8");
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML(); 
	ВремрФабрикаXDTO.ЗаписатьXML(ЗаписьХМЛ, XDTO);
	Возврат ЗаписьХМЛ.Закрыть();
	
КонецФункции // ()

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция ПолучитьСтруктуруИзСоответствия(ЗначВход) Экспорт
 
 СтруктураВозврат=Новый Структура;
 
 Если ТипЗнч(ЗначВход)=Тип("Соответствие") Тогда
  
  ФлагОщибка=Ложь;
  
  Для Каждого р Из ЗначВход Цикл
   Попытка
    СтруктураВозврат.Вставить(р.Ключ,ПолучитьСтруктуруИзСоответствия(р.Значение));
   Исключение
    ФлагОщибка=Истина;
    Прервать;
   КонецПопытки;
  КонецЦикла;
  
   Если ФлагОщибка Тогда // пришел ключь который не возможно поместить в структуру
   СтруктураВозврат = Новый Массив;
   Для Каждого р Из ЗначВход Цикл
    ДопСтруктура=Новый Структура;
    ДопСтруктура.Вставить("Ключ",р.Ключ);
    ДопСтруктура.Вставить("Значение",ПолучитьСтруктуруИзСоответствия(р.Значение));
    СтруктураВозврат.Добавить(ДопСтруктура);
   КонецЦикла;
  КонецЕсли;
  
  Возврат СтруктураВозврат; 
  
 ИначеЕсли ТипЗнч(ЗначВход)=Тип("Массив") Тогда
  
  НовыйМассив=Новый Массив;
  Для Каждого ЭлМ Из ЗначВход Цикл
   НовыйМассив.Добавить(ПолучитьСтруктуруИзСоответствия(ЭлМ));
  КонецЦикла;
  Возврат НовыйМассив;
  
 КонецЕсли;
 
 Возврат ЗначВход; 
 
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВывестиЭлементСтруктуру(Результат, Структура, Имя)           
	
	Для Каждого КиЗ из Структура Цикл           
		Если ТипЗнч(КиЗ.Значение) = Тип("Структура") Тогда
			ВывестиЭлементСтруктуру(Результат, КиЗ.Значение, Имя);
		ИначеЕсли ТипЗнч(КиЗ.Значение) = Тип("Массив") Тогда
			ВывестиЭлементМассив(Результат, КиЗ.Значение, Имя);
		Иначе
			
			Текст = КиЗ.Ключ + ": " + Строка(КиЗ.Значение);
			
			Если СтрНайти(Результат, Текст) = 0 Тогда
				
				Если Имя = Неопределено Тогда
					Результат = СокрЛП(Результат + Символы.ПС + Текст); 
				ИначеЕсли КиЗ.Ключ = Имя Тогда				
					Результат = СокрЛП(Результат + Символы.ПС + Текст); 
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла; 	
	
КонецПроцедуры

Процедура ВывестиЭлементМассив(Результат, Массив, Имя)           
	
	Для Каждого Элемент из Массив Цикл           
		Если ТипЗнч(Элемент) = Тип("Структура") Тогда
			ВывестиЭлементСтруктуру(Результат, Элемент, Имя);
		ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда
			ВывестиЭлементМассив(Результат, Элемент, Имя);
		Иначе
			Результат = СокрЛП(Результат + Символы.ПС + "  " +Строка(Элемент)); 
		КонецЕсли;	
	КонецЦикла; 	
	
КонецПроцедуры

#КонецОбласти

