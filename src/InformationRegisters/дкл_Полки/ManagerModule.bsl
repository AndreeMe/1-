#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаписатьСостояниеПолки(НастройкаСклада, trayNumber, Состояние) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаСклада.Установить(НастройкаСклада);
	НаборЗаписей.Отбор.trayNumber.Установить(trayNumber);
	НаборЗаписей.Прочитать();
	Запись = НаборЗаписей[0];
	Запись.Состояние = Состояние;

	Если Состояние = Перечисления.дкл_СостоянияПолок.Возвращена Тогда
		Запись.НомерСтатуса = 0; // никакой
	ИначеЕсли Состояние = Перечисления.дкл_СостоянияПолок.Ошибка Тогда
		Запись.НомерСтатуса = 1; // красный
	ИначеЕсли Состояние = Перечисления.дкл_СостоянияПолок.Выдана Тогда
		Запись.НомерСтатуса = 2; // зеленый
	ИначеЕсли Состояние = Перечисления.дкл_СостоянияПолок.Перемещается Тогда
		Запись.НомерСтатуса = 3; // желтый
	Иначе
		Запись.НомерСтатуса = 0; // никакой
	КонецЕсли;

	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ()

Процедура ОбновлениеСтатусаПолок(НастройкаСклада) Экспорт  
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = дкл_ОбменДаннымиСервер.ПолучитьСтатусыПолокСкладаЛифта(НастройкаСклада);

	МассивНомеровВыданныхПолок = Новый Массив;
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("status") Тогда

		Для каждого ТекущиеДанные Из Результат.status Цикл                  
			
			Если ТекущиеДанные.trayNumber = "none" Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНомеровВыданныхПолок.Добавить(ТекущиеДанные.trayNumber);
			
		КонецЦикла;     
		
	Иначе
		Возврат;
	КонецЕсли;

	// смена  состояния полок...
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("trayNumber", МассивНомеровВыданныхПолок);
	Запрос.УстановитьПараметр("Выдана"    , Перечисления.дкл_СостоянияПолок.Выдана);
	Запрос.УстановитьПараметр("НастройкаСклада", НастройкаСклада);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дкл_Полки.trayNumber КАК trayNumber
		|ИЗ
		|	РегистрСведений.дкл_Полки КАК дкл_Полки
		|ГДЕ
		|	дкл_Полки.Состояние = &Выдана
		|	И НЕ дкл_Полки.trayNumber В (&trayNumber)
		|	И дкл_Полки.НастройкаСклада = &НастройкаСклада
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	дкл_Полки.trayNumber КАК trayNumber
		|ИЗ
		|	РегистрСведений.дкл_Полки КАК дкл_Полки
		|ГДЕ
		|	НЕ дкл_Полки.Состояние = &Выдана
		|	И дкл_Полки.trayNumber В(&trayNumber)
		|	И дкл_Полки.НастройкаСклада = &НастройкаСклада";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписатьСостояниеПолки(НастройкаСклада, ВыборкаДетальныеЗаписи.trayNumber, 
			ПредопределенноеЗначение("Перечисление.дкл_СостоянияПолок.Возвращена"));
	КонецЦикла;

	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписатьСостояниеПолки(НастройкаСклада, ВыборкаДетальныеЗаписи.trayNumber, 
			ПредопределенноеЗначение("Перечисление.дкл_СостоянияПолок.Выдана"));
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция НомераВыданныхПолок(НастройкаСклада) Экспорт  
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = дкл_ОбменДаннымиСервер.ПолучитьСтатусыПолокСкладаЛифта(НастройкаСклада);

	МассивНомеровВыданныхПолок = Новый Массив;
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("status") Тогда

		Для каждого ТекущиеДанные Из Результат.status Цикл                  
			
			Если ТекущиеДанные.trayNumber = "none" Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНомеровВыданныхПолок.Добавить(ТекущиеДанные.trayNumber);
			
		КонецЦикла;     
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивНомеровВыданныхПолок;
	
КонецФункции

Функция НомераВыданныхПолокДляМассиваНастроекСкладов(НастройкиСкладов) Экспорт  
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыданныеПолки = Новый ТаблицаЗначений;
	ВыданныеПолки.Колонки.Добавить("НастройкаСклада");
	ВыданныеПолки.Колонки.Добавить("trayNumber", Новый ОписаниеТипов("Число",
												 Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	ВыданныеПолки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",
												 Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Для Каждого НастройкаСклада Из НастройкиСкладов Цикл
		
		Если НЕ ЗначениеЗаполнено(НастройкаСклада) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = дкл_ОбменДаннымиСервер.ПолучитьСтатусыПолокСкладаЛифта(НастройкаСклада);
		
		Если ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("status") Тогда
			
			Для каждого ТекущиеДанные Из Результат.status Цикл                  
				
				Если ТекущиеДанные.trayNumber = "none" Тогда
					Продолжить;
				КонецЕсли;
				
				Нов = ВыданныеПолки.Добавить();
				Нов.НастройкаСклада = НастройкаСклада;
				Нов.trayNumber = ТекущиеДанные.trayNumber;
				Нов.Количество = 1; //для последующего суммирования
				
			КонецЦикла;     
		КонецЕсли;
		
	КонецЦикла;                                    
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВыданныеПолки;
	
КонецФункции

#КонецОбласти

#КонецЕсли