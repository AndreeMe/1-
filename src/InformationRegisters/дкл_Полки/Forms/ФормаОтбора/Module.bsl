#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("ТоварыОтбор") 
		И НЕ Параметры.ТоварыОтбор.Количество() = 0 Тогда
		
		ДополнитьПолками(Параметры.ТоварыОтбор);   
		ТоварыОтбор = дкл_ОбщегоНазначенияСервер.МассивВТЗ(Параметры.ТоварыОтбор); 
		
		// ТоварыОтбор.Свернуть("НастройкаСклада"); 
		
		Если Ложь Тогда
			ТоварыОтбор = Новый ТаблицаЗначений;
		КонецЕсли;
		
		ЯчейкиБезСвязиСАСХ = 
			ТоварыОтбор.НайтиСтроки(
				Новый Структура("НастройкаСклада", Неопределено));
				
		Для каждого Стр Из ЯчейкиБезСвязиСАСХ Цикл 
			ТоварыОтбор.Удалить(Стр);
		КонецЦикла;

		ЯчейкиБезСвязиСАСХ = 
			ТоварыОтбор.НайтиСтроки(
				Новый Структура("НастройкаСклада", Справочники.дкл_НастройкиСкладовЛифтов.ПустаяСсылка()));
				
		Для каждого Стр Из ЯчейкиБезСвязиСАСХ Цикл 
			ТоварыОтбор.Удалить(Стр);
		КонецЦикла;
		
		Если ТоварыОтбор.Количество() = 0 Тогда
			Текст = "Ячейки не связаны с полками АСХ, управление не возможно.";
			ОбщегоНазначения.СообщитьПользователю(Текст,,,,Отказ);
			Возврат;
		КонецЕсли;

		НастройкиСкладов.ЗагрузитьЗначения(
			ТоварыОтбор.ВыгрузитьКолонку("НастройкаСклада"));
		
		НастройкаСкладаЛифта = ТоварыОтбор[0].НастройкаСклада;    
		
		Для Каждого Стр Из ТоварыОтбор Цикл
			Нов = Лифты.Добавить();
			Нов.НастройкаСклада = Стр.НастройкаСклада;
			Нов.КоличествоЗонВыдачи = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.НастройкаСклада, "КоличествоЗонВыдачи");
			Нов.ВыданоПолок = 0;
			Нов.НомерСтатуса = 0;
		КонецЦикла;

		ПолкиЗначение = РеквизитФормыВЗначение("Полки");
		ПолкиЗначение.Очистить();
		Для Каждого Стр Из ТоварыОтбор Цикл
			ЗаполнитьЗначенияСвойств(ПолкиЗначение.Добавить(), Стр);
		КонецЦикла;
		ЗначениеВРеквизитФормы(ПолкиЗначение, "Полки");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "дкл_СписокНастроекСкладовЛифтов" Тогда
		 ОбновитьТаблицуЛифтов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)  

	дкл_ФормыКлиент.ЗаблокироватьКнопки(ЭтотОбъект);

	УстановитьВидимостьДоступность();
	УстановитьЗоныВыбора(); 

	Если НЕ ЗначениеЗаполнено(НастройкаСкладаЛифта) Тогда
		Возврат;
	КонецЕСли;
	
	ОбновлениеСтатусов();
	
	СлучайноеЧисло = 14;
	
	#Если НЕ ВебКлиент Тогда 
		ГСЧ = Новый ГенераторСлучайныхЧисел();
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(1500, 2500) / 100;
	#КонецЕсли  
	
	Если дкл_ФормыВызовСервера.ПроверитьСоединение(НастройкаСкладаЛифта) Тогда
		ЕстьСоединение = Истина;
		ПодключитьОбработчикОжидания("ОбновлениеСтатусов", СлучайноеЧисло, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастройкаСкладаЛифтаПриИзменении(Элемент)
	
	НомерСтатусаЛифта = 0;
	
	дкл_ФормыКлиент.ЗаблокироватьКнопки(ЭтотОбъект);
	
	ВерсияПО = дкл_ФормыВызовСервера.ВерсияПО(НастройкаСкладаЛифта);

	ОбновлениеСтатусов();
	
	УстановитьВидимостьДоступность();
	УстановитьЗоныВыбора();  
	
	дкл_ФормыКлиент.УстановитьДоступностьКнопокДляТекущейПолкиВФормеОтбора(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	УстановитьВидАСХДляТекущейСтроки();
	дкл_ФормыКлиент.УстановитьДоступностьКнопокДляТекущейПолкиВФормеОтбора(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	ОбновлениеСтатусов();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПолки(Команда)

	дкл_ФормыКлиент.ЗаблокироватьКнопки(ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;      
	
	trayNumber = ТекущиеДанные.trayNumber;
	
	ПоместитьНомерПолкиВСписок(trayNumber, "Перемещается");
	Элементы.Список.Обновить();

	ПодключитьОбработчикОжидания("ВозвратПолкиПродолжение", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдачаПолки(Команда)

	дкл_ФормыКлиент.ЗаблокироватьКнопки(ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;      

	trayNumber = ТекущиеДанные.trayNumber;
	
	ПоместитьНомерПолкиВСписок(trayNumber, "Перемещается");
	Элементы.Список.Обновить();   
	
	ПодключитьОбработчикОжидания("ВыдачаПолкиПродолжение", 1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДополнитьПолками(ТоварыОтбор)
	
	МассивЯчеек = Новый Массив;
	Для Каждого мСтруктура Из ТоварыОтбор Цикл  
		// нет смысла учитывать те ячейки, которые не сможем двигать...
		Если НЕ ЗначениеЗаполнено(мСтруктура.Ячейка) Тогда
			Продолжить;
		КонецЕсли;
		МассивЯчеек.Добавить(мСтруктура.Ячейка);					
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ячейки", МассивЯчеек);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкладскиеЯчейки.Стеллаж КАК Стеллаж,
	|	СкладскиеЯчейки.Линия КАК Линия,
	|	СкладскиеЯчейки.Ярус КАК Ярус,
	|	СкладскиеЯчейки.Ссылка КАК Ячейка
	|ПОМЕСТИТЬ вр
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	СкладскиеЯчейки.Ссылка В(&Ячейки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Стеллаж,
	|	Линия,
	|	Ярус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	дкл_Полки.trayNumber КАК trayNumber,
	|	дкл_Полки.НастройкаСклада КАК НастройкаСклада,
	|	вр.Ячейка КАК Ячейка
	|ИЗ
	|	вр КАК вр
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дкл_Полки КАК дкл_Полки
	|		ПО вр.Стеллаж = дкл_Полки.НастройкаСклада.Стеллаж
	|			И вр.Линия = дкл_Полки.НастройкаСклада.Линия
	|			И вр.Ярус = дкл_Полки.Ярус
	|ГДЕ
	|	(дкл_Полки.НастройкаСклада.Стеллаж, дкл_Полки.НастройкаСклада.Линия, дкл_Полки.Ярус) В
	|			(ВЫБРАТЬ
	|				вр.Стеллаж,
	|				вр.Линия,
	|				вр.Ярус
	|			ИЗ
	|				вр КАК вр)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отбор = Новый Структура("Ячейка");
	Для Каждого мСтруктура Из ТоварыОтбор Цикл
		ЗаполнитьЗначенияСвойств(Отбор, мСтруктура);
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Отбор) Тогда
			мСтруктура.Вставить("НастройкаСклада", Выборка.НастройкаСклада);		
			мСтруктура.Вставить("trayNumber", Выборка.trayNumber);		
		Иначе
			мСтруктура.Вставить("НастройкаСклада", Неопределено);		
			мСтруктура.Вставить("trayNumber", 0);		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеСтатусов() Экспорт
	
	дкл_ФормыКлиент.ЗаблокироватьКнопки(ЭтотОбъект);

	ОбновитьТаблицуЛифтов(); 
	
	ОбновитьСтатусыПолокНаСервере(НастройкаСкладаЛифта);  
	
	дкл_ФормыКлиент.РазблокироватьКнопки(ЭтотОбъект);
	
	дкл_ФормыКлиент.УстановитьДоступностьКнопокДляТекущейПолкиВФормеОтбора(ЭтотОбъект);
	
	Элементы.Список.Обновить();

КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыПолокНаСервере(НастройкаСкладаЛифта)
	
	Для Каждого Стр Из Полки Цикл
		Стр.НомерСтатуса = 0;
	КонецЦикла;
	
	ВыданныеПолки = РегистрыСведений.дкл_Полки.НомераВыданныхПолокДляМассиваНастроекСкладов(
		НастройкиСкладов.ВыгрузитьЗначения());
		
	Отбор = Новый Структура("НастройкаСклада, trayNumber");	
	Для Каждого Стр Из ВыданныеПолки Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Стр);
		НайденныеСтроки = Полки.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.НомерСтатуса = 2; // полка выдана...
		КонецЦикла;
		
	КонецЦикла;		                            
	
	Если Ложь Тогда
		ВыданныеПолки = Новый ТаблицаЗначений;
	КонецЕсли;
	
	// зачем?
	// ВыданныеПолки.Свернуть("НастройкаСклада", "Количество");
	
	Для Каждого Стр Из Лифты Цикл
		
		НайденнаяСтрока = ВыданныеПолки.Найти(Стр.НастройкаСклада, "НастройкаСклада");
		
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Стр.ВыданоПолок = НайденнаяСтрока.Количество;	
		КонецЕсли;        

		Если Стр.НастройкаСклада = НастройкаСкладаЛифта Тогда
			ВыданоПолок = Стр.ВыданоПолок;
		КонецЕсли;        
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуЛифтов()         
	
	Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
		НастройкаСкладаЛифта = Элементы.Список.ТекущиеДанные.НастройкаСклада;	
	КонецЕсли;

	Для Каждого Стр Из Лифты Цикл
		
		// в функции устанавливается значение НомерСтатусаЛифта
		дкл_ФормыВызовСервера.ПроверитьСоединение(Стр.НастройкаСклада, Стр.НомерСтатуса, Стр.БуквенныйКод);
		
		// номер статуса для текущего лифта
		// и видимость переключателя выбора зоны выдачи
		Если Стр.НастройкаСклада = НастройкаСкладаЛифта Тогда
			НомерСтатусаЛифта = Стр.НомерСтатуса;
			БуквенныйКодСтатусаЛифта = Стр.БуквенныйКод;
			Если Стр.КоличествоЗонВыдачи = 1 Тогда
				Элементы.ЗонаВыдачи.Видимость = Ложь;
			Иначе
				Элементы.ЗонаВыдачи.Истина = Ложь;	
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	УстановитьКартинкуАСХ(БуквенныйКодСтатусаЛифта);
	
КонецПроцедуры  

&НаКлиенте
Процедура ВыдачаПолкиПродолжение() Экспорт

	requestId = Неопределено;
	
	Ответ = дкл_ФормыВызовСервера.ВыдачаПолкиНаСервере(НастройкаСкладаЛифта, trayNumber, requestId, ЗонаВыдачи);
	
	Если Ответ = Неопределено Тогда
		Возврат;	
	КонецЕсли;

	Если Ответ.Статус = 0 Тогда // выполняется, 1 - выполнено, 2 и больше - ошибка
		
		Сч = 0;
		
		Пока Ответ.Статус = 0 И Сч < 100 Цикл

			Ответ = дкл_ФормыВызовСервера.СостояниеЗапросНаСервере(НастройкаСкладаЛифта, requestId);
			
			Сч = Сч + 1;               

		КонецЦикла;
		
	КонецЕсли;
	
	Если Ответ = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// ерунда получается, только путает...
	Если Ответ.Статус = 1 Тогда
		ПоместитьНомерПолкиВСписок(trayNumber, "Выдана");
		// подкрасить лифт зеленым...            
		УстановитьКартинкуАСХ("RDY");         
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(Ответ.Текст);     
		ПоместитьНомерПолкиВСписок(trayNumber, "Ошибка");
		// подкрасить лифт желтым...
		УстановитьКартинкуАСХ("MOV");         
	КонецЕсли;

	Элементы.Список.Обновить();   
	
	дкл_ФормыКлиент.РазблокироватьКнопки(ЭтотОбъект);
	
	дкл_ФормыКлиент.УстановитьДоступностьКнопокДляТекущейПолкиВФормеОтбора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПолкиПродолжение() Экспорт

	requestId = Неопределено;

	Ответ = дкл_ФормыВызовСервера.ВозвратПолкиНаСервере(НастройкаСкладаЛифта, trayNumber, requestId);

	Если Ответ = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если Ответ.Статус = 0 Тогда // выполняется
		
		Сч = 0;
		
		Пока НЕ Ответ.Статус = 0 И Сч < 60 Цикл

			Ответ = дкл_ФормыВызовСервера.СостояниеЗапросНаСервере(НастройкаСкладаЛифта, requestId);
			
			Сч = Сч + 1;               

			Если Ответ.Статус = 2 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ответ = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ Ответ.Статус = 0 И НЕ Ответ.Статус = 1 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Ответ.Текст);     
		ПоместитьНомерПолкиВСписок(trayNumber, "Ошибка");
	Иначе                                                             
		ПоместитьНомерПолкиВСписок(trayNumber, "Возвращена");
	КонецЕсли;
	
	дкл_ФормыКлиент.РазблокироватьКнопки(ЭтотОбъект);
	
	дкл_ФормыКлиент.УстановитьДоступностьКнопокДляТекущейПолкиВФормеОтбора(ЭтотОбъект);

	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()         
	дкл_ФормыСервер.УстановитьВидимостьДоступностьДляПользователя(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗоныВыбора()         
	
	КоличествоЗонВыдачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаСкладаЛифта, "КоличествоЗонВыдачи");		
	КоличествоЗонВыдачи = ?(НЕ ЗначениеЗаполнено(КоличествоЗонВыдачи), 1, КоличествоЗонВыдачи);   

	ЗонаВыдачи = 1;
	
	Если КоличествоЗонВыдачи = 1 Тогда
		Элементы.ЗонаВыдачи.Видимость = Ложь;
	Иначе
		Элементы.ЗонаВыдачи.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуАСХ(НомерСтатуса)         
	
	Если НомерСтатуса = "RDY" Тогда
		Элементы.Картинка.Картинка = БиблиотекаКартинок.ОформлениеКругЗеленый;
	ИначеЕсли НомерСтатуса = "MOV" Тогда
		Элементы.Картинка.Картинка = БиблиотекаКартинок.ОформлениеКругЖелтый;
	ИначеЕсли НомерСтатуса = "ERR" Тогда
		Элементы.Картинка.Картинка = БиблиотекаКартинок.ОформлениеКругКрасный;
	Иначе
		Элементы.Картинка.Картинка = БиблиотекаКартинок.ОформлениеКругПустой;
	КонецЕсли;            
	
КонецПроцедуры        

&НаСервере
Процедура ПоместитьНомерПолкиВСписок(НомерПолки, ИмяСписка)
	
	ОбработанныеНомераПолок = Новый Массив;
	
	// здесь не полки, а список товаров
	// на одной полке НомерПолки
	// может быть несколько строк с товарами...
	Для Каждого Стр Из Полки Цикл
		
		ПерваяСтрока = Истина;
		
		Если НЕ Стр.trayNumber = НомерПолки Тогда
			Стр.НомерСтатуса = 0;
			Продолжить;
		КонецЕсли;
		
		Если ИмяСписка = "Выдана" Тогда
			Стр.НомерСтатуса = 2;
			Если ПерваяСтрока Тогда
				ВыданоПолок = ВыданоПолок + 1;	
			КонецЕсли;
		ИначеЕсли ИмяСписка = "Ошибка" Тогда
			Стр.НомерСтатуса = 1;
		ИначеЕсли ИмяСписка = "Перемещается" Тогда
			Стр.НомерСтатуса = 3;      
		ИначеЕсли ИмяСписка = "Возвращена" Тогда
			Стр.НомерСтатуса = 0;      
			Если ПерваяСтрока Тогда
				ВыданоПолок = ВыданоПолок - 1;
			КонецЕсли;	
		Иначе
			Стр.НомерСтатуса = 0;      
		КонецЕсли;                          
		
		ПерваяСтрока = Ложь;
		
	КонецЦикла;

	// в таблицу лифтов тоже надо перенести новое кол-во выданных полок...
	НайденныеСтроки = Лифты.НайтиСтроки(Новый Структура("НастройкаСклада",НастройкаСкладаЛифта));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ВыданоПолок = ВыданоПолок;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидАСХДляТекущейСтроки()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ВидАСХ = ВидАСХ(ТекущиеДанные.НастройкаСклада);
	
	Если ВидАСХ = ПредопределенноеЗначение("Перечисление.дкл_ВидыАСХ.Карусель") Тогда
		ДоступнаТолькоВыдачаПолки = Истина;
	Иначе
		ДоступнаТолькоВыдачаПолки = Ложь;
	КонецЕсли;
	
КонецПроцедуры                              

&НаСервереБезКонтекста
Функция ВидАСХ(НастройкаСклада)
	Возврат Справочники.дкл_НастройкиСкладовЛифтов.ВидАСХ(НастройкаСклада);
КонецФункции

#КонецОбласти




