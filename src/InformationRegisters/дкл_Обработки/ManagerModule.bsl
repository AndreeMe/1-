#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ПолучитьИмяФайлаОбработки(Знач  ИмяОбработки, КаталогОбработки = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(КаталогОбработки) Тогда
		КаталогОбработки = КаталогВременныхФайлов();
	КонецЕсли;
	ПроверитьПутьКФайлу(КаталогОбработки, ИмяОбработки);
	Возврат КаталогОбработки + ИмяОбработки + ".epf";
КонецФункции
	
//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ПодключитьОбработку(ТипСообщения, Направление, СпособПодключения = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дкл_Обработки.Отладка КАК Отладка,
		|	дкл_Обработки.КаталогОтладки КАК КаталогОтладки,
		|	дкл_Обработки.ХранилищеОбработки КАК ХранилищеОбработки,
		|	дкл_Обработки.ИмяОбработки КАК ИмяОбработки,
		|	дкл_Обработки.ВнутренняяОбработка КАК ВнутренняяОбработка
		|ИЗ
		|	РегистрСведений.дкл_Обработки КАК дкл_Обработки
		|ГДЕ
		|	дкл_Обработки.ТипСообщения = &ТипСообщения
		|	И дкл_Обработки.Направление = &Направление";
	
	Запрос.УстановитьПараметр("ТипСообщения", ТипСообщения);
	Запрос.УстановитьПараметр("Направление", Направление);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Если ВыборкаДетальныеЗаписи.ВнутренняяОбработка Тогда
		ИмяОбработки = СтрЗаменить(ВыборкаДетальныеЗаписи.ИмяОбработки, " ", "");
		НайденнаяОбработка = Метаданные.Обработки.Найти(ИмяОбработки);
		Если НЕ НайденнаяОбработка = Неопределено Тогда
			Возврат Обработки[ИмяОбработки];
		КонецЕсли;
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.Отладка Тогда
		Возврат ПолучитьОбработкуДляОтладки(
			ВыборкаДетальныеЗаписи.ИмяОбработки, ВыборкаДетальныеЗаписи.КаталогОтладки);
	Иначе 
		Возврат ПолучитьОбработку(
			ВыборкаДетальныеЗаписи.ИмяОбработки, ВыборкаДетальныеЗаписи.ХранилищеОбработки);			
	КонецЕсли;
	
КонецФункции

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция ПолучитьОбработку(Знач ИмяОбработки, Знач ХранилищеОбработки = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяОбработки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайлаОбработки = ПолучитьИмяФайлаОбработки(ИмяОбработки);
	
	БылБезопасныйРежим = Ложь;
	Если БезопасныйРежим() Тогда
		УстановитьБезопасныйРежим(Ложь);
		БылБезопасныйРежим = Истина;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаОбработки);
	
	Если Не Файл.Существует() Тогда
		Если НЕ ИзвлечьИзРепозитория(ИмяОбработки, ХранилищеОбработки) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Защита = Новый ОписаниеЗащитыОтОпасныхДействий;
	Защита.ПредупреждатьОбОпасныхДействиях = Ложь;

	Если БылБезопасныйРежим Тогда
		УстановитьБезопасныйРежим(Истина);
	КонецЕсли;
	
	Попытка
		Обработка = ВнешниеОбработки.Создать(ИмяФайлаОбработки, Ложь, Защита);
		Возврат Обработка;
	Исключение
		дкл_Логи.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-parameter-section
Функция ИзвлечьИзРепозитория(ИмяОбработки, ХранилищеОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ХранилищеОбработки = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	дкл_Обработки.ХранилищеОбработки КАК ХранилищеОбработки
		|ИЗ
		|	РегистрСведений.дкл_Обработки КАК дкл_Обработки
		|ГДЕ
		|	дкл_Обработки.ИмяОбработки = &ИмяОбработки";
		Запрос.УстановитьПараметр("ИмяОбработки", ИмяОбработки);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДвоичныеДанные = Выборка.ХранилищеОбработки.Получить();
		КонецЕсли;
	Иначе 
		ДвоичныеДанные = ХранилищеОбработки.Получить();
	КонецЕсли; 
	Попытка
		СохранитьОбработкуНаДиск(ДвоичныеДанные, ИмяОбработки);
	Исключение
		дкл_Логи.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//@skip-check module-structure-method-in-regions
Функция СохранитьОбработкуНаДиск(ДвоичныеДанные, ИмяОбработки)
	Если Не ДвоичныеДанные = Неопределено Тогда
		ИмяФайлаОбработки = ПолучитьИмяФайлаОбработки(ИмяОбработки);
		ДвоичныеДанные.Записать(ИмяФайлаОбработки);
		Возврат Истина;
	Иначе
		ВызватьИсключение "Данные обработчика с именем " + ИмяОбработки + " отсутствуют в хранилище";	
	КонецЕсли;	
КонецФункции

//@skip-check module-structure-method-in-regions
Функция ПолучитьОбработкуДляОтладки(Знач ИмяОбработки, Знач КаталогОтладки)	
	Если Не ЗначениеЗаполнено(ИмяОбработки) или Не ЗначениеЗаполнено(КаталогОтладки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИмяФайлаОбработки = ПолучитьИмяФайлаОбработки(ИмяОбработки, КаталогОтладки);
	Если ИмяФайлаОбработки = Неопределено Тогда
		дкл_Логи.СообщитьОбОшибке("Что-то пошло не так");
		Возврат Неопределено
	КонецЕсли;
	Попытка
		Файл = Новый Файл(ИмяФайлаОбработки);
		Если Не Файл.Существует() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Защита = Новый ОписаниеЗащитыОтОпасныхДействий;
		Защита.ПредупреждатьОбОпасныхДействиях = Ложь;
		Обработка = ВнешниеОбработки.Создать(ИмяФайлаОбработки, Ложь, Защита);
		Возврат Обработка;
	Исключение
		дкл_Логи.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;		
КонецФункции

//@skip-check module-structure-method-in-regions
Функция ПроверитьПутьКФайлу(КаталогОбработки, ИмяОбработки)
	КаталогОбработки = СтрЗаменить(КаталогОбработки, "/", "\");
	Если Не Прав(КаталогОбработки, 1) = "\" Тогда
		КаталогОбработки = КаталогОбработки + "\";
	КонецЕсли;
	Если Не Прав(НРег(ИмяОбработки), 4) = ".epf" Тогда
		ИмяОбработки = СтрЗаменить(ИмяОбработки, ".epf","");
	КонецЕсли;
	Возврат Истина;
КонецФункции


#КонецОбласти

#КонецЕсли