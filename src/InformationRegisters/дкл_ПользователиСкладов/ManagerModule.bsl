#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс   

Функция РеквизитыЗаполненыПередОтправкойВАСХ(НастройкаСклада, МассивПользователей = Неопределено, МассивUserId = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;

	Для Каждого userId Из МассивUserId Цикл
		userId = Строка(userId);
	КонецЦикла;	
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("userId");	
	ПроверяемыеРеквизиты.Добавить("login");	
	ПроверяемыеРеквизиты.Добавить("firstName");	
	ПроверяемыеРеквизиты.Добавить("lastName");	                                                             
	
	Если НЕ МассивПользователей = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	дкл_ПользователиСкладов.firstName КАК firstName,
		|	дкл_ПользователиСкладов.lastName КАК lastName,
		|	дкл_ПользователиСкладов.login КАК login,
		|	дкл_ПользователиСкладов.userId КАК userId,
		|	дкл_ПользователиСкладов.НастройкаСклада КАК НастройкаСклада,
		|	дкл_ПользователиСкладов.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.дкл_ПользователиСкладов КАК дкл_ПользователиСкладов
		|ГДЕ
		|	дкл_ПользователиСкладов.НастройкаСклада = &НастройкаСклада
		|	И дкл_ПользователиСкладов.Пользователь В(&МассивПользователей)";
		
		Запрос.УстановитьПараметр("НастройкаСклада", НастройкаСклада);
		Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		
	ИначеЕсли НЕ МассивUserId = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	дкл_ПользователиСкладов.firstName КАК firstName,
		|	дкл_ПользователиСкладов.lastName КАК lastName,
		|	дкл_ПользователиСкладов.login КАК login,
		|	дкл_ПользователиСкладов.userId КАК userId,
		|	дкл_ПользователиСкладов.НастройкаСклада КАК НастройкаСклада,
		|	дкл_ПользователиСкладов.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.дкл_ПользователиСкладов КАК дкл_ПользователиСкладов
		|ГДЕ
		|	дкл_ПользователиСкладов.НастройкаСклада = &НастройкаСклада
		|	И дкл_ПользователиСкладов.userId В(&МассивUserId)";
		
		Запрос.УстановитьПараметр("НастройкаСклада", НастройкаСклада);
		Запрос.УстановитьПараметр("МассивUserId", МассивUserId);
		
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	РеквизитыРегистра = Метаданные.РегистрыСведений.дкл_ПользователиСкладов.Реквизиты;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл                                
		
		Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи[Реквизит]) Тогда
				НайденныйРеквизит = РеквизитыРегистра.Найти(Реквизит);
				Если НайденныйРеквизит = Неопределено Тогда
					СинонимРеквизита = Реквизит;
				Иначе
					СинонимРеквизита = НайденныйРеквизит.Представление();
				КонецЕсли;
				Текст = "Поле %1 не заполнено";
				Текст = СтрШаблон(Текст, СинонимРеквизита);
				ОбщегоНазначения.СообщитьПользователю(Текст);
				Результат = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТекстЗапросаПользователейСклад(ПоместитьВоВременнуюТаблицу = Ложь) Экспорт
	
	Текст =
	"ВЫБРАТЬ
	|	дкл_ПользователиСкладов.НастройкаСклада КАК НастройкаСклада,
	|	дкл_ПользователиСкладов.Пользователь КАК Пользователь,
	|	дкл_ПользователиСкладов.Роль КАК Роль,
	|	дкл_ПользователиСкладов.Активна КАК Активна,
	|	дкл_ПользователиСкладов.Статус КАК Статус,
	|	дкл_ПользователиСкладов.firstName КАК firstName,
	|	дкл_ПользователиСкладов.lastName КАК lastName,
	|	дкл_ПользователиСкладов.login КАК login,
	|	дкл_ПользователиСкладов.middleName КАК middleName,
	|	дкл_ПользователиСкладов.password КАК password,
	|	дкл_ПользователиСкладов.position КАК position,
	|	дкл_ПользователиСкладов.rfid КАК rfid,
	|	дкл_ПользователиСкладов.role КАК role,
	|	дкл_ПользователиСкладов.userId КАК userId
	|ИЗ
	|	РегистрСведений.дкл_ПользователиСкладов КАК дкл_ПользователиСкладов
	|ГДЕ
	|	дкл_ПользователиСкладов.НастройкаСклада = &НастройкаСклада";                                                       
	
	Если ПоместитьВоВременнуюТаблицу Тогда
		Текст = СтрЗаменить(Текст, "ИЗ", "ПОМЕСТИТЬ врПользователиСклада" + Символы.ПС + "ИЗ");		
		Текст = Текст + Символы.ПС + "ИНДЕКСИРОВАТЬ ПО	дкл_ПользователиСкладов.Пользователь.Пользователь";
	КонецЕсли;

	Возврат Текст;
	
КонецФункции

Функция ПолучитьРеквизитыПользователяСклада(ТекущаяСтрока) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;	
	
	Пользователь = ТекущаяСтрока.Пользователь;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		 userId = Строка(Пользователь.УникальныйИдентификатор());
	 Иначе
		 userId = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Результат.Вставить("userId", Строка(Пользователь.УникальныйИдентификатор()));		
	
	Физлицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	ФамилияИмяОтчество = ФизическиеЛицаУТ.ФамилияИмяОтчество(ФизЛицо, ТекущаяДатаСеанса());
	
	Результат.Вставить("lastName"	, ФамилияИмяОтчество.Фамилия);           
	Результат.Вставить("firstName"	, ФамилияИмяОтчество.Имя);
	Результат.Вставить("middleName"	, ФамилияИмяОтчество.Отчество);     
	Результат.Вставить("login"		, дкл_ОбщегоНазначенияСервер.Транслит(СокрЛП(ФамилияИмяОтчество.Фамилия)));           
	Результат.login = СтрЗаменить(Результат.login, " ", "");

	Результат.Вставить("position", "");	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции // ()

Функция ЕстьПравоУправленияПолками(Пользователь, НастройкаСклада) Экспорт

	Если Пользователи.РолиДоступны("ПолныеПрава", Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЕстьРольДляУправленияПолками(Пользователь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дкл_ПользователиСкладов.УправлениеЧерез1С КАК УправлениеЧерез1С
		|ИЗ
		|	РегистрСведений.дкл_ПользователиСкладов КАК дкл_ПользователиСкладов
		|ГДЕ
		|	дкл_ПользователиСкладов.НастройкаСклада = &НастройкаСклада
		|	И дкл_ПользователиСкладов.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("НастройкаСклада", НастройкаСклада);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	ВыборкаДетальныеЗаписи.Следующий();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВыборкаДетальныеЗаписи.УправлениеЧерез1С;
	
КонецФункции                                     

Функция ЕстьРольДляУправленияПолками(Пользователь) Экспорт
	
	Если Пользователи.РолиДоступны(
			"ПолныеПрава, дкл_Администратор, дкл_Оператор", Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции                                     

Функция ПроверятьАвторизациюНаАСХ(НастройкаСклада, Пользователь = Неопределено, userId = Неопределено) Экспорт

	// проверяем всегда по пользователю...
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();	
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дкл_ПользователиСкладов.ПроверятьАвторизациюНаАСХ КАК ПроверятьАвторизациюНаАСХ,
		|	дкл_ПользователиСкладов.userId КАК userId
		|ИЗ
		|	РегистрСведений.дкл_ПользователиСкладов КАК дкл_ПользователиСкладов
		|ГДЕ
		|	дкл_ПользователиСкладов.НастройкаСклада = &НастройкаСклада
		|	И дкл_ПользователиСкладов.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("НастройкаСклада", НастройкаСклада);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	// возвращаем...
	userId = ВыборкаДетальныеЗаписи.userId;
	
	Возврат ВыборкаДетальныеЗаписи.ПроверятьАвторизациюНаАСХ;

КонецФункции                                     

Процедура УдалитьСтроки(НастройкаСклада, МассивUserId) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дкл_ПользователиСкладов.НастройкаСклада КАК НастройкаСклада,
		|	дкл_ПользователиСкладов.Пользователь КАК Пользователь,
		|	дкл_ПользователиСкладов.userId КАК userId
		|ИЗ
		|	РегистрСведений.дкл_ПользователиСкладов КАК дкл_ПользователиСкладов
		|ГДЕ
		|	дкл_ПользователиСкладов.НастройкаСклада = &НастройкаСклада
		|	И дкл_ПользователиСкладов.userId В(&userId)";
	
	Запрос.УстановитьПараметр("userId", МассивUserId);
	Запрос.УстановитьПараметр("НастройкаСклада", НастройкаСклада);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.дкл_ПользователиСкладов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
		МенеджерЗаписи.Удалить();
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры          

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьСотрудникаПоФизЛицу(ФизическоеЛицо) Экспорт

	Перем Сотрудник;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	//|	И Сотрудники.ГоловнаяОрганизация = &Организация
	|	И НЕ Сотрудники.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	//ToDo: что с организацией?
//	Запрос.УстановитьПараметр("Организация",    Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Сотрудник = Выборка.Ссылка;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Сотрудник;
	
КонецФункции

#КонецОбласти

#КонецЕсли
