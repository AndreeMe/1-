////////////////////////////////////////////////////////////////////////////////
// Обмен данными с АСХ ДиКом вер. 2.1
//  
////////////////////////////////////////////////////////////////////////////////
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
                                         
#Область ПрограммныйИнтерфейс      

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ПолучитьСписокПользователей(НастройкаСклада) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);

	Интерфейс = "UserService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	//@skip-check bsl-variable-name-invalid
	мФабрикаXDTO = ПолучитьФабрикуХДТОПоПрокси(Прокси);

	Если мФабрикаXDTO = Неопределено Тогда
		Возврат Новый Структура; 	
	КонецЕсли;
	
	//@skip-check bsl-variable-name-invalid
	request = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "GetUserList"));	       
		
	Попытка
		Ответ = Прокси.getUserList(request);
	Исключение                                 
		Ошибка  = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Текст = СтрШаблон(
		"%1 
		|(%2)", 
		Ошибка, "в АСХ должны быть заполнены все обязательные реквизиты пользователей");
		ОбщегоНазначения.СообщитьПользователю(Текст);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат дкл_ОбменДаннымиСервер.ОбъектXDTOВСтруктуру(Ответ);
	
КонецФункции	

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ПолучитьСтатусСклада(НастройкаСклада) Экспорт

	// коды                         
	// === в работе ===
	// 0 - АСХ находится в состоянии покоя.
	// 1 - Выполняется операция. 
	// === в работе ===
	// 2 - Есть неполадки, мешающие работе АСХ.
	// (теперь нужен код, т.к. надо отображать все состояния)

	Результат = Новый Структура;
	Результат.Вставить("НаСвязи", Ложь);
	Результат.Вставить("ВРаботе", Ложь);
	Результат.Вставить("Статус",  "");
	Результат.Вставить("Код", 0);
	Результат.Вставить("БуквенныйКод", "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси("SystemService", НастройкаСклада);
		
		Если ТипЗнч(Прокси) = Тип("WSПрокси") Тогда
			
			ВремФабрикаXDTO = дкл_ОбменДаннымиСервер.ПолучитьФабрикуХДТОПоПрокси(Прокси);
			
			CheckHealth = ВремФабрикаXDTO.Создать(ВремФабрикаXDTO.Тип(
			"http://www.dikom.ru/lift/integration/services/", "CheckHealth"));	
			
			Ответ = дкл_ОбменДаннымиСервер.ОбъектXDTOВСтруктуру(Прокси.checkHealth(CheckHealth));
			
			БуквенныйКод = дкл_ОбщегоНазначенияПовтИсп.БуквенныйКодСтатусаЛифта(Ответ.status);
			
			Результат.НаСвязи = Истина;
			Если Ответ.status < 2 Тогда
				Результат.ВРаботе = Истина;
			Иначе
				Результат.ВРаботе = Ложь;
			КонецЕсли;
			Результат.Статус = Ответ.statusText;
			Результат.Код = Ответ.status;
			Результат.БуквенныйКод = БуквенныйКод;
			
		Иначе
			
			Результат.НаСвязи = Ложь;    
			Результат.ВРаботе = Ложь;
			Результат.Статус = Прокси; // здесь ошибка... 
			Результат.Код = -1; // нет связи...   
			Результат.БуквенныйКод = "NOC"; // no connection
			
		КонецЕсли;

	Исключение         

		Результат.НаСвязи = Ложь;    
		Результат.Код = -1; // нет связи...
		Результат.ВРаботе = Ложь;
		Результат.Статус = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.БуквенныйКод = "NOC"; // no connection
		
	КонецПопытки;

	Возврат Результат;

КонецФункции // ()

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ПолучитьОстатки(НастройкаСклада) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Интерфейс = "ItemService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	//@skip-check bsl-variable-name-invalid
	мФабрикаXDTO = дкл_ОбменДаннымиСервер.ПолучитьФабрикуХДТОПоПрокси(Прокси);
	
	//@skip-check bsl-variable-name-invalid
	request = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "GetStockBalances"));	       
	
	Ответ = Прокси.getStockBalances(request);
	
	Возврат дкл_ОбменДаннымиСервер.ОбъектXDTOВСтруктуру(Ответ);
	
КонецФункции // ()          

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
//@skip-check bsl-variable-name-invalid
Процедура ВыгрузитьПользователейСклада(НастройкаСклада, МассивПользователей = Неопределено, userId = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаСклада", НастройкаСклада);         
	Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
	Запрос.УстановитьПараметр("userId", userId);
	
	Если МассивПользователей = Неопределено И userId = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	дкл_ПользователиСкладов.active_ КАК active,
		|	дкл_ПользователиСкладов.firstName КАК firstName,
		|	дкл_ПользователиСкладов.lastName КАК lastName,
		|	дкл_ПользователиСкладов.login КАК login,
		|	дкл_ПользователиСкладов.middleName КАК middleName,
		|	дкл_ПользователиСкладов.password КАК password,
		|	дкл_ПользователиСкладов.position КАК position,
		|	дкл_ПользователиСкладов.rfid КАК rfid,
		|	дкл_ПользователиСкладов.role КАК role,
		|	дкл_ПользователиСкладов.userId КАК userId,
		|	дкл_ПользователиСкладов.Пользователь КАК Пользователь,
		|	дкл_ПользователиСкладов.remoteAddress КАК remoteAddress,
		|	дкл_ПользователиСкладов.remoteLogin КАК remoteLogin,
		|	дкл_ПользователиСкладов.remotePassword КАК remotePassword
		|ИЗ
		|	РегистрСведений.дкл_ПользователиСкладов КАК дкл_ПользователиСкладов
		|ГДЕ
		|	дкл_ПользователиСкладов.НастройкаСклада = &НастройкаСклада";
		
	ИначеЕсли ЗначениеЗаполнено(МассивПользователей) Тогда

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	дкл_ПользователиСкладов.active_ КАК active,
		|	дкл_ПользователиСкладов.firstName КАК firstName,
		|	дкл_ПользователиСкладов.lastName КАК lastName,
		|	дкл_ПользователиСкладов.login КАК login,
		|	дкл_ПользователиСкладов.middleName КАК middleName,
		|	дкл_ПользователиСкладов.password КАК password,
		|	дкл_ПользователиСкладов.position КАК position,
		|	дкл_ПользователиСкладов.rfid КАК rfid,
		|	дкл_ПользователиСкладов.role КАК role,
		|	дкл_ПользователиСкладов.userId КАК userId,
		|	дкл_ПользователиСкладов.Пользователь КАК Пользователь,
		|	дкл_ПользователиСкладов.remoteAddress КАК remoteAddress,
		|	дкл_ПользователиСкладов.remoteLogin КАК remoteLogin,
		|	дкл_ПользователиСкладов.remotePassword КАК remotePassword
		|ИЗ
		|	РегистрСведений.дкл_ПользователиСкладов КАК дкл_ПользователиСкладов
		|ГДЕ
		|	дкл_ПользователиСкладов.Пользователь В(&МассивПользователей)
		|	И дкл_ПользователиСкладов.НастройкаСклада = &НастройкаСклада";

	ИначеЕсли ЗначениеЗаполнено(userId) Тогда

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	дкл_ПользователиСкладов.active_ КАК active,
		|	дкл_ПользователиСкладов.firstName КАК firstName,
		|	дкл_ПользователиСкладов.lastName КАК lastName,
		|	дкл_ПользователиСкладов.login КАК login,
		|	дкл_ПользователиСкладов.middleName КАК middleName,
		|	дкл_ПользователиСкладов.password КАК password,
		|	дкл_ПользователиСкладов.position КАК position,
		|	дкл_ПользователиСкладов.rfid КАК rfid,
		|	дкл_ПользователиСкладов.role КАК role,
		|	дкл_ПользователиСкладов.userId КАК userId,
		|	дкл_ПользователиСкладов.Пользователь КАК Пользователь,
		|	дкл_ПользователиСкладов.remoteAddress КАК remoteAddress,
		|	дкл_ПользователиСкладов.remoteLogin КАК remoteLogin,
		|	дкл_ПользователиСкладов.remotePassword КАК remotePassword
		|ИЗ
		|	РегистрСведений.дкл_ПользователиСкладов КАК дкл_ПользователиСкладов
		|ГДЕ
		|	дкл_ПользователиСкладов.userId В(&userId)
		|	И дкл_ПользователиСкладов.НастройкаСклада = &НастройкаСклада";
		
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Интерфейс = "UserService";	
	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	мФабрикаXDTO = дкл_ОбменДаннымиСервер.ПолучитьФабрикуХДТОПоПрокси(Прокси);
	
	UploadUserList = мФабрикаXDTO.Создать(мФабрикаXDTO.Тип(
		дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "UploadUserList"));	       
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл        
		
		Если НЕ ЗначениеЗаполнено(Выборка.userId) Тогда
			Продолжить;	
		КонецЕсли;
	
		User = мФабрикаXDTO.Создать(мФабрикаXDTO.Тип(
			дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "UploadUser"));	       
			
		User.userId = Выборка.userId;
		User.firstName = Выборка.firstName;
		User.lastName = Выборка.lastName;
		User.middleName = Выборка.middleName;
		User.position = Выборка.position;
		User.login = Выборка.login;
		User.password = Выборка.password;		
		User.role = Выборка.role;
		User.rfid = Выборка.rfid;

		Тип = мФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "boolean");
		Значение = мФабрикаXDTO.Создать(Тип, Выборка.active);		
		User.active = Значение;
		
		User.remoteLogin = Выборка.remoteLogin;
		User.remotePassword = Выборка.remotePassword;		  
		User.remoteAddress = Выборка.remoteAddress;		
		
		UploadUserList.user.Добавить(User);	
		
	КонецЦикла;                                
	
	Попытка
		Прокси.uploadUserList(UploadUserList);
	Исключение             
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;                                

	Выборка.Сбросить();
	
	ДатаСтатуса = ТекущаяДатаСеанса();
	
	Пока Выборка.Следующий() Цикл

		// меняем статус записей	
		НаборЗаписей = РегистрыСведений.дкл_ПользователиСкладов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НастройкаСклада.Установить(НастройкаСклада);
		НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
		НаборЗаписей.Отбор.userId.Установить(Выборка.userId);
		НаборЗаписей.Прочитать();
		
		Для каждого Запись Из НаборЗаписей Цикл
		    Запись.Статус = Перечисления.дкл_Статусы.Отправлено;
			Запись.ДатаСтатуса = ДатаСтатуса;
		КонецЦикла;

		// чтобы отменить обработчик "Перед записью"...	
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(); 
		
	КонецЦикла;                                 
	
КонецПроцедуры

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
//@skip-check bsl-variable-name-invalid
Процедура ВыгрузитьСкладскиеЯчейки(НастройкаСклада, СкладскиеЯчейки) Экспорт

	Интерфейс = "StorageService";	
	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	мФабрикаXDTO = дкл_ОбменДаннымиСервер.ПолучитьФабрикуХДТОПоПрокси(Прокси);
	
	Для Каждого Ячейка Из СкладскиеЯчейки Цикл
		
		Если НЕ ЗначениеЗаполнено(Ячейка.storageId) Тогда
			Продолжить;	
		КонецЕсли;
		
		message = "";
		errorCode = "";
		
		Попытка
			Прокси.uploadStorage(
				Ячейка.storageId, Ячейка.itemId, Ячейка.trayNumber, 
					Число(Ячейка.poseX), Число(Ячейка.poseY), Число(Ячейка.width), Число(Ячейка.depth), 
						Ячейка.barcode, message, errorCode);

			РегистрыСведений.дкл_СкладскиеЯчейки.ОбновитьСтатус(НастройкаСклада, Ячейка.СкладскаяЯчейка, 
				Перечисления.дкл_Статусы.Отправлено, ТекущаяДатаСеанса());
					
		Исключение             
			ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;                                
		
	КонецЦикла;                                

КонецПроцедуры

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
//@skip-check bsl-variable-name-invalid
Процедура УдалитьСкладскиеЯчейки(НастройкаСклада, СкладскиеЯчейки) Экспорт

	Интерфейс = "StorageService";	
	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	Для Каждого Ячейка Из СкладскиеЯчейки Цикл
		
		Если НЕ ЗначениеЗаполнено(Ячейка.storageId) Тогда
			Продолжить;	
		КонецЕсли;
		
		message = "";
		errorCode = "";
		
		Попытка
			Прокси.deleteStorage(Ячейка.storageId, message, errorCode);
			РегистрыСведений.дкл_СкладскиеЯчейки.УдалитьСкладскуюЯчейку(НастройкаСклада, Ячейка.СкладскаяЯчейка);
		Исключение             
			ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;  
		
		Если ЗначениеЗаполнено(errorCode) И ЗначениеЗаполнено(message) Тогда
			ОбщегоНазначения.СообщитьПользователю(Строка(errorCode) + ": " + message);	
		КонецЕсли;
		
	КонецЦикла;                                

КонецПроцедуры


//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
//@skip-check bsl-variable-name-invalid
Функция ВыдатьПолку(НастройкаСклада, НомерПолки, requestId = Неопределено, feederId = 1, platform = 0) Экспорт 
	
	// platform = 0 -любая доступная, 1 - низ, 2 - верх
	
	УстановитьПривилегированныйРежим(Истина);
	
	userId = Неопределено;

	Интерфейс = "TrayService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	мФабрикаXDTO = дкл_ОбменДаннымиСервер.ПолучитьФабрикуХДТОПоПрокси(Прокси);
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	requestId  = Строка(Новый УникальныйИдентификатор);
	trayNumber = НомерПолки;
	platform   = 0; 
	
	Если НЕ РегистрыСведений.дкл_ПользователиСкладов.ПроверятьАвторизациюНаАСХ(НастройкаСклада, Пользователь, userId) Тогда

		// возвращаемые значения...
		status = 0;
		statusText = "";
		error      = 0;
		errorText  = "";
		
		Попытка
			Прокси.getTray(requestId, trayNumber, feederId, platform, status, statusText, error, errorText );
		Исключение
			Текст = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю(Текст);
			Результат = Новый Структура("Текст, Статус", Текст, 0);
			Возврат Результат;
		КонецПопытки;
		
		дкл_ОбщегоНазначенияСервер.Пауза(1);   
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат СформироватьОтвет(status, statusText, error, errorText);
		
	Иначе
	
		GetTraySecure = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "GetTraySecure"));	       

		GetTray = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "GetTray"));	       
		
		OperationRequestStatus = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "OperationRequestStatus"));	       
		
		GetTray.requestId = requestId;
		GetTray.trayNumber = trayNumber;
		GetTray.feederId = feederId;
		GetTray.platform = platform;
		
		GetTraySecure.userId = userId;             
		GetTraySecure.GetTray = GetTray;             

		Попытка
			OperationRequestStatus = Прокси.getTraySecure(GetTraySecure);
		Исключение
			Текст = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю(Текст);
			Результат = Новый Структура("Текст, Статус", Текст, 0);
			Возврат Результат;
		КонецПопытки;

		дкл_ОбщегоНазначенияСервер.Пауза(1);   
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат СформироватьОтвет(
			OperationRequestStatus.status, OperationRequestStatus.statusText, 
				OperationRequestStatus.error, OperationRequestStatus.errorText);
		
	КонецЕсли;	                 

КонецФункции // ()          

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
//@skip-check bsl-variable-name-invalid
Функция ВернутьПолку(НастройкаСклада, НомерПолки, requestId = Неопределено) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	userId = Неопределено;

	Интерфейс = "TrayService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	мФабрикаXDTO = дкл_ОбменДаннымиСервер.ПолучитьФабрикуХДТОПоПрокси(Прокси);
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	requestId  = Строка(Новый УникальныйИдентификатор);
	trayNumber = НомерПолки;
		
	Если НЕ РегистрыСведений.дкл_ПользователиСкладов.ПроверятьАвторизациюНаАСХ(НастройкаСклада, Пользователь, userId) Тогда

		// возвращаемые значения...
		status = 0;
		statusText = "";
		error      = 0;
		errorText  = "";
		
		Попытка
			Прокси.returnTray(requestId, trayNumber, status, statusText, error, errorText);
		Исключение
			Текст = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю(Текст);
			Результат = Новый Структура("Текст, Статус", Текст, 0);
			Возврат Результат;
		КонецПопытки;
		
		дкл_ОбщегоНазначенияСервер.Пауза(1);   
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат СформироватьОтвет(status, statusText, error, errorText);
		
	Иначе
	
		ReturnTraySecure = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "ReturnTraySecure"));	       

		ReturnTray = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "ReturnTray"));	       
		
		OperationRequestStatus = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "OperationRequestStatus"));	       
		
		ReturnTray.requestId = requestId;
		ReturnTray.trayNumber = trayNumber;
		
		ReturnTraySecure.userId = userId;             
		ReturnTraySecure.ReturnTray = ReturnTray;             

		Попытка
			OperationRequestStatus = Прокси.returnTraySecure(ReturnTraySecure);
		Исключение
			Текст = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю(Текст);
			Результат = Новый Структура("Текст, Статус", Текст, 0);
			Возврат Результат;
		КонецПопытки;

		дкл_ОбщегоНазначенияСервер.Пауза(1);   
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат СформироватьОтвет(
			OperationRequestStatus.status, OperationRequestStatus.statusText, 
				OperationRequestStatus.error, OperationRequestStatus.errorText);
		
	КонецЕсли;	                 
	
КонецФункции // ()          

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
//@skip-check bsl-variable-name-invalid
Функция СостояниеЗапроса(НастройкаСклада, requestId = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Интерфейс = "SystemService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);

	status = 0;
	statusText = "";
	
	errorNil = Ложь;
	error = 0;
	errorText = "";
	
	// 0 - выполняется, 1 - выполнено, дальше ошибки...
	Попытка
		Прокси.getRequestStatus(requestId, status, statusText, error, errorText);
	Исключение
		// почему-то возникает ошибка при двойном возврате полке 
		// (при двойном вызове полки ошибки нет)
		// эмулируем ответ, но надо разбираться с лифтом...
		status = 2;
		statusText = "Ошибка выполнения";
		error = "";
		errorText = "";
	КонецПопытки;
	
	дкл_ОбщегоНазначенияСервер.Пауза(1);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СформироватьОтвет(status, statusText, error, errorText, Истина);

КонецФункции // ()  

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ОбновитьПолкуВЛифте(НастройкаСклада, РеквизитыПолки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Интерфейс = "TrayService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	//@skip-check bsl-variable-name-invalid
	мФабрикаXDTO = дкл_ОбменДаннымиСервер.ПолучитьФабрикуХДТОПоПрокси(Прокси);
	
	UpdateTrayInfoList = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "UpdateTrayInfoList"));	       

	TrayUpdateInfo = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "TrayUpdateInfo"));	       
		
	ЗаполнитьЗначенияСвойств(TrayUpdateInfo, РеквизитыПолки);	

	UpdateTrayInfoList.trayUpdateInfo.Добавить(TrayUpdateInfo);
		
	Ответ = Прокси.updateTrayInfoList(UpdateTrayInfoList);

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат дкл_ОбменДаннымиСервер.ОбъектXDTOВСтруктуру(Ответ);

КонецФункции // ()

//@skip-check export-procedure-missing-comment
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция РедактированиеПолкиВЛифте(НастройкаСклада, РеквизитыПолки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Интерфейс = "TrayService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	//@skip-check bsl-variable-name-invalid
	мФабрикаXDTO = дкл_ОбменДаннымиСервер.ПолучитьФабрикуХДТОПоПрокси(Прокси);
	
	SetTrayEditAccess = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "SetTrayEditAccess"));	

	TrayToSetEditAccess = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "TrayToSetEditAccess"));	

	ЗаполнитьЗначенияСвойств(TrayToSetEditAccess, РеквизитыПолки);	
	
	SetTrayEditAccess.TrayToSetEditAccess.Добавить(TrayToSetEditAccess);

	Ответ = Прокси.setTrayEditAccess(SetTrayEditAccess);

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат дкл_ОбменДаннымиСервер.ОбъектXDTOВСтруктуру(Ответ);

КонецФункции // ()

// Получает список полок склада-лифта запросом через веб-сервис
//
// Параметры:
// НастройкаСклада - СправочникСсылка.дкл_НастройкаСклада - настройка склада, для которой надо определить версию ПО
//
// Возвращаемое значение:
//  Список полок - структура с перечем полок
//                                                           
Функция ПолучитьСписокПолокСкладаЛифта(НастройкаСклада) Экспорт 
	
	Если НЕ Справочники.дкл_НастройкиСкладовЛифтов.ПроверитьСтрокуСоединения(НастройкаСклада, Истина) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Интерфейс = "TrayService";	
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	
	//@skip-check bsl-variable-name-invalid
	мФабрикаXDTO = ПолучитьФабрикуХДТОПоПрокси(Прокси);
	
	Если мФабрикаXDTO = Неопределено Тогда
		Возврат Новый Структура; 	
	КонецЕсли;
	
	//@skip-check bsl-variable-name-invalid
	request = мФабрикаXDTO.Создать(
		мФабрикаXDTO.Тип(дкл_ОбщегоНазначенияСервер.URIПространстваИменСервиса(), "GetTrayList"));	       
	
	Ответ = Прокси.getTrayList(request);
	
	Возврат дкл_ОбменДаннымиСервер.ОбъектXDTOВСтруктуру(Ответ);

КонецФункции // ()          

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//@skip-check bsl-variable-name-invalid
Функция СформироватьОтвет(status, statusText, error, errorText, ЭтоОтветСостояниеЗапроса = Ложь)
	
	// 0- выполнено.
	// 1- выполняется.
	// 2 - Техническая ошибка (поломка) в Лифте.
	// 3 - Ошибка в API и передаваемых запросах.
	// 4. АСХ занят выполнением другой операции.
	// 5- Превышены допустимые характеристики груза (вес, высота).
	// 6- Тайм-аут. Подвисший запрос.	
	
	// Пример:
	// <status>2</status>
	// <statusText>Ошибка выполнения</statusText>
	// <error>102</error>
	// <errorText>Текст ошибки</errorText>      
	
	// " Запрос не может быть выполнен. Статус 3. Указан неверный параметр trayNumber. Полка не найдена"
	// statusText. Статус status                          
	
	Ответ = "";
	
	БуквенныйКод = дкл_ОбщегоНазначенияПовтИсп.БуквенныйКодСтатусаОперациииСПолкой(status);
	
	// 0 - выполняется, 1 - выполнено, 2...5 -ошибки
	Если БуквенныйКод = "ERR" Тогда
		Если ЗначениеЗаполнено(errorText) И ЗначениеЗаполнено(statusText) Тогда
			Текст = "ошибка %1: %2; статус %3: %4";	
			Ответ = СтрШаблон(Текст, error, errorText, status, statusText);	
		ИначеЕсли ЗначениеЗаполнено(errorText) Тогда
			Текст = "%1: %2";	
			Ответ = СтрШаблон(Текст, error, errorText);	
		ИначеЕсли ЗначениеЗаполнено(statusText) Тогда
			Текст = "ошибка %1; статус %2: %3";	
			Ответ = СтрШаблон(Текст, error, status, statusText);	
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура("Текст, Статус, БуквенныйКод", СокрЛП(Ответ), status);
	
	Возврат Результат;
	
КонецФункции // ()

Функция ИнициализироватьДанныеСообщенияОбмена() Экспорт

	//@skip-check structure-consructor-too-many-keys
	ДанныеСообщенияОбмена = 
		Новый Структура(
			"IDСообщения,Дата,ТипСообщения,Направление,Месяц,Сообщение,ХранилищеЗначения,Автор,ДатаОбработки,
			|НавигационнаяСсылка,НастройкаСклада,Обработано,Ответ,СообщениеОбОшибке,СсылкаНаОбъект,Статус");

	Возврат ДанныеСообщенияОбмена;
	
КонецФункции

Функция ПолучитьФабрикуХДТО() Экспорт   
	Возврат WSСсылки.ExternalIntegration_16.ПолучитьWSОпределения().ФабрикаXDTO;
КонецФункции

Функция ПолучитьФабрикуХДТОПоПрокси(Прокси) Экспорт   
	Возврат Прокси.ФабрикаXDTO;
КонецФункции

Функция ПолучитьФабрикуХДТОПоНастройкеСклада(Интерфейс, НастройкаСклада) Экспорт   
	Прокси = дкл_ОбщегоНазначенияСервер.СоздатьПрокси(Интерфейс, НастройкаСклада);
	Возврат Прокси.ФабрикаXDTO;
КонецФункции

#КонецОбласти

#КонецЕсли

